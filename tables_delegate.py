from PyQt5.QtWidgets import QItemDelegate, QLineEdit
from PyQt5 import QtCore
from PyQt5.QtGui import QIntValidator, QDoubleValidator, QValidator


class EmptyAllowedValidator(QValidator):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å —è—á–µ–π–∫—É –ø—É—Å—Ç–æ–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
    def __init__(self, base_validator, parent=None):
        super().__init__(parent)
        self.base_validator = base_validator

    def validate(self, text, pos):
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if text.strip() == "":
            return QValidator.Acceptable, text, pos
        return self.base_validator.validate(text, pos)


class TablesDelegate(QItemDelegate):
    def __init__(self, parent=None, is_int=False, is_positive=False):
        super().__init__(parent)
        self.is_int = is_int
        self.is_positive = is_positive

    def createEditor(self, parent, option, index):
        editor = QLineEdit(parent)

        # üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        if self.is_int:
            validator = QIntValidator()
            if self.is_positive:
                validator.setBottom(0)
        else:
            validator = QDoubleValidator()
            if self.is_positive:
                validator.setBottom(0.0)
            validator.setNotation(QDoubleValidator.StandardNotation)

        validator.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        editor.setValidator(EmptyAllowedValidator(validator))

        # üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ "0" –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π
        def fix_dot_prefix(text):
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∏—Ä–∞–µ—Ç –≤—Å—ë ‚Äî –Ω–µ –º–µ—à–∞–µ–º
            if not text.strip():
                return
            if text == ".":
                editor.setText("0.")
            elif text == "-.":
                editor.setText("-0.")
            elif text == "+.":
                editor.setText("+0.")

        editor.textEdited.connect(fix_dot_prefix)
        return editor

    def setModelData(self, editor, model, index):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
        text = editor.text().strip()

        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—á–∏—Å—Ç–∫—É —è—á–µ–π–∫–∏
        if text == "":
            model.setData(index, "")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º 0 –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if text.startswith("."):
            text = "0" + text
        elif text.startswith("-."):
            text = "-0" + text[1:]
        elif text.startswith("+."):
            text = "+0" + text[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            val = float(text)
            if self.is_positive and val < 0:
                return  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
            # üîπ –µ—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ int
            if self.is_int or val.is_integer():
                text = str(int(val))
            else:
                text = str(val)
        except ValueError:
            return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥

        model.setData(index, text)
